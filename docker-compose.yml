services:
  hmtm_bff:
    container_name: hmtm_bff
    image: d3m0s/hmtm_bff:latest
    ports:
      - "${HMTM_BFF_OUTER_PORT}:${HMTM_BFF_INNER_PORT}"
    env_file:
      - .env.bff
    depends_on:
      - jaeger
      - hmtm_bff_cache
      - hmtm_sso
      - hmtm_toys
      - hmtm_tickets
      - hmtm_notifications
    volumes:
      - ./logs/hmtm_bff:/app/logs
    networks:
      - hmtm_network

  jaeger:
    image: jaegertracing/all-in-one:latest
    env_file:
      - .env
    ports:
      - "${TRACING_OUTER_API_TRACES_PORT}:${TRACING_INNER_API_TRACES_PORT}"
      - "${TRACING_OUTER_WEB_PORT}:${TRACING_INNER_WEB_PORT}"
    networks:
      - hmtm_network
    restart: unless-stopped

  hmtm_bff_cache:
    container_name: hmtm_bff_cache
    hostname: hmtm_bff_cache
    image: redis:latest
    env_file:
      - .env
    ports:
      - "${HMTM_BFF_CACHE_OUTER_PORT}:${HMTM_BFF_CACHE_INNER_PORT}"
    volumes:
      - ./redis_data/hmtm_bff:/data
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: redis-server --requirepass ${HMTM_BFF_CACHE_PASSWORD}
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "$HMTM_BFF_CACHE_PASSWORD", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - hmtm_network

  # Prometheus для сбора метрик
  prometheus:
    image: prom/prometheus
    env_file:
      - .env
    ports:
      - "${PROMETHEUS_OUTER_PORT}:${PROMETHEUS_INNER_PORT}"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml  # Конфиг Prometheus
    networks:
      - hmtm_network
    restart: unless-stopped
    depends_on:
      - hmtm_bff

  # Grafana для визуализации
  grafana:
    image: grafana/grafana
    env_file:
      - .env
    ports:
      - "${GRAFANA_OUTER_PORT}:${GRAFANA_INNER_PORT}"
    volumes:
      - ./grafana:/var/lib/grafana  # Сохраняет данные Grafana
    networks:
      - hmtm_network
    restart: unless-stopped
    depends_on:
      - prometheus

  hmtm_sso:
    container_name: hmtm_sso
    image: d3m0s/hmtm_sso:latest
    ports:
      - "${HMTM_SSO_OUTER_PORT}:${HMTM_SSO_INNER_PORT}"
    env_file:
      - .env.sso
    depends_on:
      - hmtm_sso_database
      - hmtm_sso_cache
      - nats
      - jaeger
    volumes:
      - ./logs/hmtm_sso:/app/logs
    networks:
      - hmtm_network

  hmtm_sso_database:
    container_name: hmtm_sso_database
    hostname: hmtm_sso_database
    image: postgres
    restart: always
    env_file:
      - .env.sso
    volumes:
      - ./postgres_data/hmtm_sso:/var/lib/postgresql/data
      - ./postgres_backups/hmtm_sso:/backups
    ports:
      - "${HMTM_SSO_DB_OUTER_PORT}:${HMTM_SSO_DB_INNER_PORT}"
    networks:
      - hmtm_network

  hmtm_sso_cache:
    container_name: hmtm_sso_cache
    hostname: hmtm_sso_cache
    image: redis:latest
    env_file:
      - .env.sso
    ports:
      - "${HMTM_SSO_CACHE_OUTER_PORT}:${HMTM_SSO_CACHE_INNER_PORT}"
    volumes:
      - ./redis_data/hmtm_sso:/data
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: redis-server --requirepass ${HMTM_SSO_CACHE_PASSWORD}
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "$HMTM_SSO_CACHE_PASSWORD", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - hmtm_network

  hmtm_toys:
    container_name: hmtm_toys
    image: d3m0s/hmtm_toys:latest
    ports:
      - "${HMTM_TOYS_OUTER_PORT}:${HMTM_TOYS_INNER_PORT}"
    env_file:
      - .env.toys
    depends_on:
      - hmtm_toys_database
      - jaeger
      - hmtm_sso
    volumes:
      - ./logs/hmtm_toys:/app/logs
    networks:
      - hmtm_network

  hmtm_toys_database:
    container_name: hmtm_toys_database
    hostname: hmtm_toys_database
    image: postgres
    restart: always
    env_file:
      - .env.toys
    volumes:
      - ./postgres_data/hmtm_toys:/var/lib/postgresql/data
      - ./postgres_backups/hmtm_toys:/backups
    ports:
      - "${HMTM_TOYS_DB_OUTER_PORT}:${HMTM_TOYS_DB_INNER_PORT}"
    networks:
      - hmtm_network

  hmtm_tickets:
    container_name: hmtm_tickets
    image: d3m0s/hmtm_tickets:latest
    ports:
      - "${HMTM_TICKETS_OUTER_PORT}:${HMTM_TICKETS_INNER_PORT}"
    env_file:
      - .env.tickets
    depends_on:
      - hmtm_tickets_database
      - jaeger
      - hmtm_toys
      - nats
    volumes:
      - ./logs/hmtm_tickets:/app/logs
    networks:
      - hmtm_network

  hmtm_tickets_database:
    container_name: hmtm_tickets_database
    hostname: hmtm_tickets_database
    image: postgres
    restart: always
    env_file:
      - .env.tickets
    volumes:
      - ./postgres_data/hmtm_tickets:/var/lib/postgresql/data
      - ./postgres_backups/hmtm_tickets:/backups
    ports:
      - "${HMTM_TICKETS_DB_OUTER_PORT}:${HMTM_TICKETS_DB_INNER_PORT}"
    networks:
      - hmtm_network

  hmtm_notifications:
    container_name: hmtm_notifications
    image: d3m0s/hmtm_notifications:latest
    ports:
      - "${HMTM_NOTIFICATIONS_OUTER_PORT}:${HMTM_NOTIFICATIONS_INNER_PORT}"
    env_file:
      - .env.notifications
    depends_on:
      - hmtm_notifications_database
      - nats
      - jaeger
      - hmtm_sso
      - hmtm_toys
      - hmtm_tickets
    volumes:
      - ./logs/hmtm_notifications:/app/logs
    networks:
      - hmtm_network

  hmtm_notifications_database:
    container_name: hmtm_notifications_database
    hostname: hmtm_notifications_database
    image: postgres
    restart: always
    env_file:
      - .env.notifications
    volumes:
      - ./postgres_data/hmtm_notifications:/var/lib/postgresql/data
      - ./postgres_backups/hmtm_notifications:/backups
    ports:
      - "${HMTM_NOTIFICATIONS_DB_OUTER_PORT}:${HMTM_NOTIFICATIONS_DB_INNER_PORT}"
    networks:
      - hmtm_network

  nats:
    image: nats:alpine
    container_name: nats
    restart: always
    command: -c /etc/nats/nats.conf
    ports:
      - "${NATS_OUTER_CLIENT_PORT}:${NATS_INNER_CLIENT_PORT}"
      - "${NATS_OUTER_CLUSTER_PORT}:${NATS_INNER_CLUSTER_PORT}"
      - "${NATS_OUTER_WEB_PORT}:${NATS_INNER_WEB_PORT}"
    volumes:
      - ./nats.conf:/etc/nats/nats.conf
    networks:
      - hmtm_network

networks:
  hmtm_network:
    name: hmtm_network
    external: true
